<?php
/**
 * Admin-specific functionality for the WP SEO Meta Descriptions plugin.
 *
 * @package WP_SEO_Meta_Descriptions
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

class WPSMD_Admin {

    /**
     * Initialize the admin hooks.
     */
    public function __construct() {
        add_action( 'add_meta_boxes', array( $this, 'add_meta_box' ) );
        add_action( 'save_post', array( $this, 'save_seo_data' ) );
    }

    /**
     * Adds the meta box to the post editing screen.
     */
    public function add_meta_box() {
        add_meta_box(
            'wpsmd_seo_settings_box',
            __( 'SEO Settings & AI Tools', 'wp-seo-meta-descriptions' ),
            array( $this, 'meta_box_callback' ),
            array( 'post', 'page' ),
            'normal',
            'high'
        );
    }

    /**
     * Callback function to display the meta box content.
     *
     * @param WP_Post $post The post object.
     */
    public function meta_box_callback( $post ) {
        wp_nonce_field( 'wpsmd_save_seo_data', 'wpsmd_seo_nonce' );

        $seo_title = get_post_meta( $post->ID, '_wpsmd_seo_title', true );
        $meta_description = get_post_meta( $post->ID, '_wpsmd_meta_description', true );
        $openai_api_key = get_post_meta( $post->ID, '_wpsmd_openai_api_key', true );
        $schema_type = get_post_meta( $post->ID, '_wpsmd_schema_type', true );
        if ( empty( $schema_type ) ) {
            $schema_type = 'Article'; // Default schema type
        }

        // SEO Title Field
        echo '<p>';
        echo '<label for="wpsmd_seo_title_field"><strong>' . __( 'SEO Title:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_seo_title_field" name="wpsmd_seo_title_field" value="' . esc_attr( $seo_title ) . '" style="width:100%;" />';
        echo '<button type="button" id="wpsmd_generate_title_btn" class="button">' . __( 'Generate with AI', 'wp-seo-meta-descriptions' ) . '</button>';
        echo '</p>';

        // Meta Description Field
        echo '<p>';
        echo '<label for="wpsmd_meta_description_field"><strong>' . __( 'Meta Description:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<textarea id="wpsmd_meta_description_field" name="wpsmd_meta_description_field" rows="4" style="width:100%;">' . esc_textarea( $meta_description ) . '</textarea>';
        echo '<button type="button" id="wpsmd_generate_description_btn" class="button">' . __( 'Generate with AI', 'wp-seo-meta-descriptions' ) . '</button>';
        echo '</p>';

        // Keywords (placeholder for now, AI will populate this)
        echo '<p>';
        echo '<label for="wpsmd_keywords_field"><strong>' . __( 'Keywords:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_keywords_field" name="wpsmd_keywords_field" readonly style="width:100%;" placeholder="'.__( 'Keywords will be generated by AI', 'wp-seo-meta-descriptions' ).'" />';
        echo '<button type="button" id="wpsmd_find_keywords_btn" class="button">' . __( 'Find Keywords with AI', 'wp-seo-meta-descriptions' ) . '</button>';
        echo '</p>';

        // Schema Type Selector
        echo '<hr><h3>' . __( 'Schema Markup / Structured Data', 'wp-seo-meta-descriptions' ) . '</h3>';
        echo '<p>';
        echo '<label for="wpsmd_schema_type_field"><strong>' . __( 'Schema Type:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<select id="wpsmd_schema_type_field" name="wpsmd_schema_type_field" style="width:100%;">';
        $schema_types = array(
            'Article' => __( 'Article (Default for Posts)', 'wp-seo-meta-descriptions' ),
            'WebPage' => __( 'WebPage (Default for Pages)', 'wp-seo-meta-descriptions' ),
            'Product' => __( 'Product', 'wp-seo-meta-descriptions' ),
            'Recipe'  => __( 'Recipe', 'wp-seo-meta-descriptions' ),
            'DiscussionForumPosting' => __( 'Discussion Forum Posting', 'wp-seo-meta-descriptions' ),
            'FAQPage' => __( 'FAQ Page', 'wp-seo-meta-descriptions' ),
            'Organization' => __( 'Organization', 'wp-seo-meta-descriptions' ),
            // Add more schema types here as needed
        );
        foreach ( $schema_types as $value => $label ) {
            echo '<option value="' . esc_attr( $value ) . '" ' . selected( $schema_type, $value, false ) . '>' . esc_html( $label ) . '</option>';
        }
        echo '</select>';
        echo '</p>';

        // Conditional Fields for Product Schema
        $product_fields_style = ( $schema_type === 'Product' ) ? 'display:block;' : 'display:none;';
        echo '<div id="wpsmd_product_schema_fields" style="' . $product_fields_style . '">';
        echo '<h4>' . __( 'Product Schema Details', 'wp-seo-meta-descriptions' ) . '</h4>';
        $product_name = get_post_meta( $post->ID, '_wpsmd_product_name', true );
        $product_image = get_post_meta( $post->ID, '_wpsmd_product_image', true );
        $product_description = get_post_meta( $post->ID, '_wpsmd_product_description', true );
        $product_sku = get_post_meta( $post->ID, '_wpsmd_product_sku', true );
        $product_brand = get_post_meta( $post->ID, '_wpsmd_product_brand', true );
        $product_price = get_post_meta( $post->ID, '_wpsmd_product_price', true );
        $product_currency = get_post_meta( $post->ID, '_wpsmd_product_currency', true );
        $product_availability = get_post_meta( $post->ID, '_wpsmd_product_availability', true );

        echo '<p><label>' . __( 'Product Name:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_name" value="' . esc_attr( $product_name ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Post Title', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<p><label>' . __( 'Product Image URL:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_image" value="' . esc_url( $product_image ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Featured Image', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<p><label>' . __( 'Product Description:', 'wp-seo-meta-descriptions' ) . ' <textarea name="wpsmd_product_description" rows="3" style="width:100%;" placeholder="' . __( 'Defaults to Meta Description or Excerpt', 'wp-seo-meta-descriptions' ) . '">' . esc_textarea( $product_description ) . '</textarea></label></p>';
        echo '<p><label>' . __( 'SKU:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_sku" value="' . esc_attr( $product_sku ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Brand Name:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_brand" value="' . esc_attr( $product_brand ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Price:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_price" value="' . esc_attr( $product_price ) . '" style="width:50%;" placeholder="e.g., 19.99" /></label>';
        echo ' <label>' . __( 'Currency:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_product_currency" value="' . esc_attr( $product_currency ) . '" style="width:40%;" placeholder="e.g., USD" /></label></p>';
        echo '<p><label>' . __( 'Availability:', 'wp-seo-meta-descriptions' ) . ' <select name="wpsmd_product_availability" style="width:100%;">';
        $availabilities = array( 'https://schema.org/InStock' => 'In Stock', 'https://schema.org/OutOfStock' => 'Out of Stock', 'https://schema.org/PreOrder' => 'Pre-Order' );
        foreach($availabilities as $val => $label) { echo '<option value="'.esc_attr($val).'" '.selected($product_availability, $val, false).'>'.esc_html($label).'</option>'; }
        echo '</select></label></p>';
        echo '</div>';

        // Conditional Fields for Recipe Schema
        $recipe_fields_style = ( $schema_type === 'Recipe' ) ? 'display:block;' : 'display:none;';
        echo '<div id="wpsmd_recipe_schema_fields" style="' . $recipe_fields_style . '">';
        echo '<h4>' . __( 'Recipe Schema Details', 'wp-seo-meta-descriptions' ) . '</h4>';
        $recipe_name = get_post_meta( $post->ID, '_wpsmd_recipe_name', true );
        $recipe_description = get_post_meta( $post->ID, '_wpsmd_recipe_description', true );
        $recipe_image = get_post_meta( $post->ID, '_wpsmd_recipe_image', true );
        $recipe_ingredients = get_post_meta( $post->ID, '_wpsmd_recipe_ingredients', true ); // Store as comma-separated or one per line
        $recipe_instructions = get_post_meta( $post->ID, '_wpsmd_recipe_instructions', true ); // Store as text, steps separated by newlines
        $recipe_prep_time = get_post_meta( $post->ID, '_wpsmd_recipe_prep_time', true ); // ISO 8601 duration format e.g., PT30M
        $recipe_cook_time = get_post_meta( $post->ID, '_wpsmd_recipe_cook_time', true ); // ISO 8601 duration format e.g., PT1H
        $recipe_yield = get_post_meta( $post->ID, '_wpsmd_recipe_yield', true );
        $recipe_calories = get_post_meta( $post->ID, '_wpsmd_recipe_calories', true );

        echo '<p><label>' . __( 'Recipe Name:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_name" value="' . esc_attr( $recipe_name ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Post Title', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<p><label>' . __( 'Recipe Description:', 'wp-seo-meta-descriptions' ) . ' <textarea name="wpsmd_recipe_description" rows="3" style="width:100%;" placeholder="' . __( 'Defaults to Meta Description or Excerpt', 'wp-seo-meta-descriptions' ) . '">' . esc_textarea( $recipe_description ) . '</textarea></label></p>';
        echo '<p><label>' . __( 'Recipe Image URL:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_image" value="' . esc_url( $recipe_image ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Featured Image', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<p><label>' . __( 'Ingredients (one per line):', 'wp-seo-meta-descriptions' ) . ' <textarea name="wpsmd_recipe_ingredients" rows="5" style="width:100%;">' . esc_textarea( $recipe_ingredients ) . '</textarea></label></p>';
        echo '<p><label>' . __( 'Instructions (one step per line):', 'wp-seo-meta-descriptions' ) . ' <textarea name="wpsmd_recipe_instructions" rows="8" style="width:100%;">' . esc_textarea( $recipe_instructions ) . '</textarea></label></p>';
        echo '<p><label>' . __( 'Prep Time (e.g., PT30M for 30 mins):', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_prep_time" value="' . esc_attr( $recipe_prep_time ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Cook Time (e.g., PT1H for 1 hour):', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_cook_time" value="' . esc_attr( $recipe_cook_time ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Recipe Yield (e.g., 4 servings):', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_yield" value="' . esc_attr( $recipe_yield ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Calories (e.g., 250):', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_recipe_calories" value="' . esc_attr( $recipe_calories ) . '" style="width:100%;" /></label></p>';
        echo '</div>';

        // Conditional Fields for FAQPage Schema
        $faq_fields_style = ( $schema_type === 'FAQPage' ) ? 'display:block;' : 'display:none;';
        echo '<div id="wpsmd_faq_schema_fields" style="' . $faq_fields_style . '">';
        echo '<h4>' . __( 'FAQ Page Schema Details', 'wp-seo-meta-descriptions' ) . '</h4>';
        $faq_main_entity = get_post_meta( $post->ID, '_wpsmd_faq_main_entity', true ); // Store as JSON or structured text

        echo '<p><label>' . __( 'FAQ Questions & Answers (one Q&A pair per line, separate Q and A with a pipe | ):', 'wp-seo-meta-descriptions' ) . '<br><small>' . __('Example: What is your return policy? | Our return policy lasts 30 days.', 'wp-seo-meta-descriptions') . '</small><textarea name="wpsmd_faq_main_entity" rows="8" style="width:100%;" placeholder="' . __( 'Enter each question and answer pair on a new line, separated by a pipe character (|).', 'wp-seo-meta-descriptions' ) . '">' . esc_textarea( $faq_main_entity ) . '</textarea></label></p>';
        echo '</div>';

        // Conditional Fields for Organization Schema
        $org_fields_style = ( $schema_type === 'Organization' ) ? 'display:block;' : 'display:none;';
        echo '<div id="wpsmd_organization_schema_fields" style="' . $org_fields_style . '">';
        echo '<h4>' . __( 'Organization Schema Details', 'wp-seo-meta-descriptions' ) . '</h4>';
        $org_name = get_post_meta( $post->ID, '_wpsmd_org_name', true );
        $org_legal_name = get_post_meta( $post->ID, '_wpsmd_org_legal_name', true );
        $org_logo_url = get_post_meta( $post->ID, '_wpsmd_org_logo_url', true );
        $org_street_address = get_post_meta( $post->ID, '_wpsmd_org_street_address', true );
        $org_locality = get_post_meta( $post->ID, '_wpsmd_org_locality', true );
        $org_region = get_post_meta( $post->ID, '_wpsmd_org_region', true );
        $org_postal_code = get_post_meta( $post->ID, '_wpsmd_org_postal_code', true );
        $org_country = get_post_meta( $post->ID, '_wpsmd_org_country', true );
        $org_telephone = get_post_meta( $post->ID, '_wpsmd_org_telephone', true );
        $org_email = get_post_meta( $post->ID, '_wpsmd_org_email', true );
        $org_same_as = get_post_meta( $post->ID, '_wpsmd_org_same_as', true ); // Store as comma-separated URLs

        echo '<p><label>' . __( 'Organization Name (if different from Site Title):', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_name" value="' . esc_attr( $org_name ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Site Title', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<p><label>' . __( 'Legal Name:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_legal_name" value="' . esc_attr( $org_legal_name ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Logo URL:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_logo_url" value="' . esc_url( $org_logo_url ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Site Icon', 'wp-seo-meta-descriptions' ) . '" /></label></p>';
        echo '<h5>' . __( 'Address:', 'wp-seo-meta-descriptions' ) . '</h5>';
        echo '<p><label>' . __( 'Street Address:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_street_address" value="' . esc_attr( $org_street_address ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'City/Locality:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_locality" value="' . esc_attr( $org_locality ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'State/Region:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_region" value="' . esc_attr( $org_region ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Postal Code:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_postal_code" value="' . esc_attr( $org_postal_code ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Country:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_country" value="' . esc_attr( $org_country ) . '" style="width:100%;" /></label></p>';
        echo '<h5>' . __( 'Contact Information:', 'wp-seo-meta-descriptions' ) . '</h5>';
        echo '<p><label>' . __( 'Telephone:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_telephone" value="' . esc_attr( $org_telephone ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Email:', 'wp-seo-meta-descriptions' ) . ' <input type="text" name="wpsmd_org_email" value="' . esc_attr( $org_email ) . '" style="width:100%;" /></label></p>';
        echo '<p><label>' . __( 'Social Profiles & Other URLs (SameAs - comma separated):', 'wp-seo-meta-descriptions' ) . ' <textarea name="wpsmd_org_same_as" rows="3" style="width:100%;" placeholder="https://www.facebook.com/yourpage, https://www.twitter.com/yourprofile">' . esc_textarea( $org_same_as ) . '</textarea></label></p>';
        echo '</div>';

        // JavaScript to toggle schema fields visibility
        echo "<script type='text/javascript'>
            jQuery(document).ready(function($) {
                function toggleSchemaFields() {
                    var selectedType = $('#wpsmd_schema_type_field').val();
                    $('#wpsmd_product_schema_fields').hide();
                    $('#wpsmd_recipe_schema_fields').hide();
                    $('#wpsmd_faq_schema_fields').hide();
                    $('#wpsmd_organization_schema_fields').hide(); // Hide Organization fields by default
                    if (selectedType === 'Product') {
                        $('#wpsmd_product_schema_fields').show();
                    } else if (selectedType === 'Recipe') {
                        $('#wpsmd_recipe_schema_fields').show();
                    } else if (selectedType === 'DiscussionForumPosting') {
                        // No specific extra fields for DiscussionForumPosting in this iteration, but a section could be added here.
                    } else if (selectedType === 'FAQPage') {
                        $('#wpsmd_faq_schema_fields').show();
                    } else if (selectedType === 'Organization') {
                        $('#wpsmd_organization_schema_fields').show();
                    }
                }
                toggleSchemaFields(); // Initial call
                $('#wpsmd_schema_type_field').on('change', toggleSchemaFields);
            });
        </script>";


        // Open Graph Fields
        echo '<hr><h3>' . __( 'Open Graph Settings (Facebook, LinkedIn, etc.)', 'wp-seo-meta-descriptions' ) . '</h3>';
        $og_title = get_post_meta( $post->ID, '_wpsmd_og_title', true );
        $og_description = get_post_meta( $post->ID, '_wpsmd_og_description', true );
        $og_image = get_post_meta( $post->ID, '_wpsmd_og_image', true );

        echo '<p>';
        echo '<label for="wpsmd_og_title_field"><strong>' . __( 'Open Graph Title:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_og_title_field" name="wpsmd_og_title_field" value="' . esc_attr( $og_title ) . '" style="width:100%;" placeholder="' . __( 'Defaults to SEO Title or Post Title', 'wp-seo-meta-descriptions' ) . '" />';
        echo '</p>';

        echo '<p>';
        echo '<label for="wpsmd_og_description_field"><strong>' . __( 'Open Graph Description:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<textarea id="wpsmd_og_description_field" name="wpsmd_og_description_field" rows="3" style="width:100%;" placeholder="' . __( 'Defaults to Meta Description or Post Excerpt', 'wp-seo-meta-descriptions' ) . '">' . esc_textarea( $og_description ) . '</textarea>';
        echo '</p>';

        echo '<p>';
        echo '<label for="wpsmd_og_image_field"><strong>' . __( 'Open Graph Image URL:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_og_image_field" name="wpsmd_og_image_field" value="' . esc_url( $og_image ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Featured Image. Enter full URL.', 'wp-seo-meta-descriptions' ) . '" />';
        echo '</p>';

        // Twitter Card Fields
        echo '<hr><h3>' . __( 'Twitter Card Settings', 'wp-seo-meta-descriptions' ) . '</h3>';
        $twitter_title = get_post_meta( $post->ID, '_wpsmd_twitter_title', true );
        $twitter_description = get_post_meta( $post->ID, '_wpsmd_twitter_description', true );
        $twitter_image = get_post_meta( $post->ID, '_wpsmd_twitter_image', true );

        echo '<p>';
        echo '<label for="wpsmd_twitter_title_field"><strong>' . __( 'Twitter Title:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_twitter_title_field" name="wpsmd_twitter_title_field" value="' . esc_attr( $twitter_title ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Open Graph Title or SEO Title', 'wp-seo-meta-descriptions' ) . '" />';
        echo '</p>';

        echo '<p>';
        echo '<label for="wpsmd_twitter_description_field"><strong>' . __( 'Twitter Description:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<textarea id="wpsmd_twitter_description_field" name="wpsmd_twitter_description_field" rows="3" style="width:100%;" placeholder="' . __( 'Defaults to Open Graph Description or Meta Description', 'wp-seo-meta-descriptions' ) . '">' . esc_textarea( $twitter_description ) . '</textarea>';
        echo '</p>';

        echo '<p>';
        echo '<label for="wpsmd_twitter_image_field"><strong>' . __( 'Twitter Image URL:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_twitter_image_field" name="wpsmd_twitter_image_field" value="' . esc_url( $twitter_image ) . '" style="width:100%;" placeholder="' . __( 'Defaults to Open Graph Image or Featured Image. Enter full URL.', 'wp-seo-meta-descriptions' ) . '" />';
        echo '</p>';

        // OpenAI API Key Field
        echo '<hr><p>';
        echo '<label for="wpsmd_openai_api_key_field"><strong>' . __( 'OpenAI API Key:', 'wp-seo-meta-descriptions' ) . '</strong></label><br />';
        echo '<input type="text" id="wpsmd_openai_api_key_field" name="wpsmd_openai_api_key_field" value="' . esc_attr( $openai_api_key ) . '" style="width:100%;" />';
        echo '<small>' . __( 'Enter your OpenAI API key to enable AI features. This key is saved with this post/page.', 'wp-seo-meta-descriptions' ) . '</small>';
        echo '</p>';
    }

    /**
     * Saves the SEO data when the post is saved.
     *
     * @param int $post_id The ID of the post being saved.
     */
    public function save_seo_data( $post_id ) {
        if ( ! isset( $_POST['wpsmd_seo_nonce'] ) || ! wp_verify_nonce( $_POST['wpsmd_seo_nonce'], 'wpsmd_save_seo_data' ) ) {
            return;
        }

        if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
            return;
        }

        if ( isset( $_POST['post_type'] ) && 'page' == $_POST['post_type'] ) {
            if ( ! current_user_can( 'edit_page', $post_id ) ) {
                return;
            }
        } else {
            if ( ! current_user_can( 'edit_post', $post_id ) ) {
                return;
            }
        }

        // Save SEO Title
        if ( isset( $_POST['wpsmd_seo_title_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_seo_title', sanitize_text_field( $_POST['wpsmd_seo_title_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_seo_title' );
        }

        // Save Meta Description
        if ( isset( $_POST['wpsmd_meta_description_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_meta_description', sanitize_textarea_field( $_POST['wpsmd_meta_description_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_meta_description' );
        }

        // Save OpenAI API Key
        if ( isset( $_POST['wpsmd_openai_api_key_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_openai_api_key', sanitize_text_field( $_POST['wpsmd_openai_api_key_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_openai_api_key' );
        }

        // Save Open Graph Title
        if ( isset( $_POST['wpsmd_og_title_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_og_title', sanitize_text_field( $_POST['wpsmd_og_title_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_og_title' );
        }

        // Save Open Graph Description
        if ( isset( $_POST['wpsmd_og_description_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_og_description', sanitize_textarea_field( $_POST['wpsmd_og_description_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_og_description' );
        }

        // Save Open Graph Image
        if ( isset( $_POST['wpsmd_og_image_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_og_image', esc_url_raw( $_POST['wpsmd_og_image_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_og_image' );
        }

        // Save Twitter Title
        if ( isset( $_POST['wpsmd_twitter_title_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_twitter_title', sanitize_text_field( $_POST['wpsmd_twitter_title_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_twitter_title' );
        }

        // Save Twitter Description
        if ( isset( $_POST['wpsmd_twitter_description_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_twitter_description', sanitize_textarea_field( $_POST['wpsmd_twitter_description_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_twitter_description' );
        }

        // Save Twitter Image
        if ( isset( $_POST['wpsmd_twitter_image_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_twitter_image', esc_url_raw( $_POST['wpsmd_twitter_image_field'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_twitter_image' );
        }

        // Save FAQPage Schema Data
        if ( isset( $_POST['wpsmd_schema_type_field'] ) && $_POST['wpsmd_schema_type_field'] === 'FAQPage' ) {
            if ( isset( $_POST['wpsmd_faq_main_entity'] ) ) {
                update_post_meta( $post_id, '_wpsmd_faq_main_entity', sanitize_textarea_field( $_POST['wpsmd_faq_main_entity'] ) );
            } else {
                delete_post_meta( $post_id, '_wpsmd_faq_main_entity' );
            }
        } else {
            // If schema type is not FAQPage, ensure FAQ data is removed to prevent orphaned data
            delete_post_meta( $post_id, '_wpsmd_faq_main_entity' );
        }

        // Save Organization Schema Data
        if ( isset( $_POST['wpsmd_schema_type_field'] ) && $_POST['wpsmd_schema_type_field'] === 'Organization' ) {
            $org_fields_to_save = array(
                '_wpsmd_org_name',
                '_wpsmd_org_legal_name',
                '_wpsmd_org_logo_url',
                '_wpsmd_org_street_address',
                '_wpsmd_org_locality',
                '_wpsmd_org_region',
                '_wpsmd_org_postal_code',
                '_wpsmd_org_country',
                '_wpsmd_org_telephone',
                '_wpsmd_org_email',
                '_wpsmd_org_same_as'
            );
            foreach($org_fields_to_save as $field_key_suffix) {
                $post_key = str_replace('_wpsmd_', 'wpsmd_', $field_key_suffix); // form field name
                if ( isset( $_POST[$post_key] ) ) {
                    if ($field_key_suffix === '_wpsmd_org_logo_url' || $field_key_suffix === '_wpsmd_org_same_as') {
                         if ($field_key_suffix === '_wpsmd_org_same_as') {
                            update_post_meta( $post_id, $field_key_suffix, sanitize_textarea_field( $_POST[$post_key] ) );
                         } else {
                            update_post_meta( $post_id, $field_key_suffix, esc_url_raw( $_POST[$post_key] ) );
                         }
                    } else {
                        update_post_meta( $post_id, $field_key_suffix, sanitize_text_field( $_POST[$post_key] ) );
                    }
                } else {
                    delete_post_meta( $post_id, $field_key_suffix );
                }
            }
        } else {
            // If schema type is not Organization, ensure Organization data is removed
            $org_fields_to_delete = array(
                '_wpsmd_org_name',
                '_wpsmd_org_legal_name',
                '_wpsmd_org_logo_url',
                '_wpsmd_org_street_address',
                '_wpsmd_org_locality',
                '_wpsmd_org_region',
                '_wpsmd_org_postal_code',
                '_wpsmd_org_country',
                '_wpsmd_org_telephone',
                '_wpsmd_org_email',
                '_wpsmd_org_same_as'
            );
            foreach($org_fields_to_delete as $field_key_suffix) {
                delete_post_meta( $post_id, $field_key_suffix );
            }
        }

        // Save BreadcrumbList Schema Data
        if ( isset( $_POST['wpsmd_schema_type_field'] ) && $_POST['wpsmd_schema_type_field'] === 'BreadcrumbList' ) {
            if ( isset( $_POST['wpsmd_breadcrumb_items'] ) ) {
                update_post_meta( $post_id, '_wpsmd_breadcrumb_items', sanitize_textarea_field( $_POST['wpsmd_breadcrumb_items'] ) );
            } else {
                delete_post_meta( $post_id, '_wpsmd_breadcrumb_items' );
            }
        } else {
            // If schema type is not BreadcrumbList, ensure Breadcrumb data is removed
            delete_post_meta( $post_id, '_wpsmd_breadcrumb_items' );
        }

        // Save Speakable CSS Selectors
        if ( !empty( $_POST['wpsmd_speakable_css_selectors'] ) ) {
            update_post_meta( $post_id, '_wpsmd_speakable_css_selectors', sanitize_textarea_field( $_POST['wpsmd_speakable_css_selectors'] ) );
        } else {
            delete_post_meta( $post_id, '_wpsmd_speakable_css_selectors' );
        }

        // Save Schema Type
        if ( isset( $_POST['wpsmd_schema_type_field'] ) ) {
            update_post_meta( $post_id, '_wpsmd_schema_type', sanitize_text_field( $_POST['wpsmd_schema_type_field'] ) );
        } else {
            // Default to Article or WebPage based on post type if not set
            $post_type = get_post_type($post_id);
            $default_schema = ($post_type === 'page') ? 'WebPage' : 'Article';
            update_post_meta( $post_id, '_wpsmd_schema_type', $default_schema );
        }

        // Save Product Schema Data
        $product_fields = array(
            '_wpsmd_product_name' => 'sanitize_text_field',
            '_wpsmd_product_image' => 'esc_url_raw',
            '_wpsmd_product_description' => 'sanitize_textarea_field',
            '_wpsmd_product_sku' => 'sanitize_text_field',
            '_wpsmd_product_brand' => 'sanitize_text_field',
            '_wpsmd_product_price' => 'sanitize_text_field', // Consider floatval or similar for actual use
            '_wpsmd_product_currency' => 'sanitize_text_field',
            '_wpsmd_product_availability' => 'sanitize_text_field', // Should be a valid schema.org URL
        );
        foreach ($product_fields as $key => $sanitizer) {
            $field_name = str_replace('_wpsmd_', 'wpsmd_', $key); // maps _wpsmd_product_name to wpsmd_product_name
            if ( isset( $_POST[$field_name] ) ) {
                update_post_meta( $post_id, $key, call_user_func( $sanitizer, $_POST[$field_name] ) );
            } else {
                delete_post_meta( $post_id, $key );
            }
        }

        // No specific fields for DiscussionForumPosting to save in this iteration beyond the type itself.

        // Save Recipe Schema Data
        $recipe_fields = array(
            '_wpsmd_recipe_name' => 'sanitize_text_field',
            '_wpsmd_recipe_description' => 'sanitize_textarea_field',
            '_wpsmd_recipe_image' => 'esc_url_raw',
            '_wpsmd_recipe_ingredients' => 'sanitize_textarea_field', // Stored as string, parsed on output
            '_wpsmd_recipe_instructions' => 'sanitize_textarea_field', // Stored as string, parsed on output
            '_wpsmd_recipe_prep_time' => 'sanitize_text_field', // ISO 8601
            '_wpsmd_recipe_cook_time' => 'sanitize_text_field', // ISO 8601
            '_wpsmd_recipe_yield' => 'sanitize_text_field',
            '_wpsmd_recipe_calories' => 'sanitize_text_field',
        );
        foreach ($recipe_fields as $key => $sanitizer) {
            $field_name = str_replace('_wpsmd_', 'wpsmd_', $key);
            if ( isset( $_POST[$field_name] ) ) {
                update_post_meta( $post_id, $key, call_user_func( $sanitizer, $_POST[$field_name] ) );
            } else {
                delete_post_meta( $post_id, $key );
            }
        }

        // Save Twitter Image (This was duplicated, ensure it's correctly placed or removed if redundant)
        // The original block for Twitter image was above the new schema saving logic.
        // If it's meant to be here, it's fine. If it was a copy-paste error, it should be removed.
        // For now, assuming it's intentional or a reordering.
        // if ( isset( $_POST['wpsmd_twitter_image_field'] ) ) { // This is a duplicate of lines 196-200
        // update_post_meta( $post_id, '_wpsmd_twitter_image', esc_url_raw( $_POST['wpsmd_twitter_image_field'] ) );
        // } else {
        // delete_post_meta( $post_id, '_wpsmd_twitter_image' );
        // }
    }

}

?>